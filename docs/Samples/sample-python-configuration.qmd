---
title: "The Python Way"
author: 
    - "Lars Vilhuber"
description: "Some (tentative) best practices for Python projects"
---

### Single configuration file with relative paths

- Encouraged:

NEEDS CONTENT

### Use of relative paths in main program for inclusions

NEEDS CONTENT

### Dependency management

Python can manage dependencies through the use of the "requirements.txt" file (for more info, see [PIP documentation](https://pip.readthedocs.io/en/1.1/requirements.html)).

The requirements.txt will list the Python dependencies:
```
MyApp
Framework==0.9.4
Library>=0.2
```
which can then be installed in other users by running
```
pip install -r requirements.txt
```

A working environment can "freeze" the dependencies by running
```
pip freeze > requirements.txt
```
which needs to be edited to include only the main dependencies, not the cascading other dependencies, to avoid too much platform-specificity.

### Virtual environments

Python virtual environments can be used to create isolated environments for different projects, ensuring that each project has its own dependencies and versions. This is particularly useful when working on multiple projects that may require different versions of the same package.

> See [LDI Replication Lab Manual](https://labordynamicsinstitute.github.io/ldilab-manual/96-30-running-python-jupyter.html#best-practice-to-reproduce-a-python-paper-python-environments) for an example.